
### Prepare project for compilation

REST API project depends on the Scheduling project. To build REST API
it is necessary to copy there all binaries produced as result of Scheduling 
compilation: content of the 'Scheduling/dist/lib' into the 'lib/scheduling'.
This can be done using special ant target 'copy.dependencies' 
(this target assumes that special build property 'scheduling.project.dir' contains 
path to the compiled Scheduling project).

Also special ant script was created for quick start with REST API project:
- check out 'build' project (svn://scm.gforge.inria.fr/svn/proactive/build)
- go to the build project
- execute 'ant prepare-restapi' 
This ant target will check out ProActive Programming, Scheduling and REST API projects, 
compile Programming and Scheduling and will copy all required dependencies into the REST API, 
after this REST API project is completely ready for compilation (note: before executing 
ant script it is possible to modify some script parameters like svn url to use, 
see build/build.properties for all available options).


### Compilation

An ant file is provided, targets are 
  - compile -- compile the source code
  - war     -- create the war file to be deployed within a J2EE server
  - clean   -- perform cleanup


Installation:
  the war file contains a property file 'portal.properties' that contains configuration properties : 
    scheduler.url = the url of the scheduler
    rm.url = the url of the resource manager
    scheduler.cache.login = the login of the account to use to cache the scheduler state 
	   (must have the right to download the scheduler state)
    scheduler.cache.password = password linked to the 'cache' user

Updating the version of scheduling or resteasy
  the jar files of ProActive Scheduling are located under lib/scheduling,
  those of resteasy under lib/resteasy
  these jar files are copied to WebContent/WEB-INF before compiling
  the project or creating the war file.

Generation of a release
  By default, the version of the rest api is set to the current timestamp.
  To specify a version, edit the build.properties file and set the rest_api.version variable
	 
The Scheduler and the resource manager login mechanism are separate processes.
One must log on on each subsystem to be able to query REST commands.
When a user logs on, a session id is returned and must be send within the header of any call otherwise an 401 (unauthorized) error is thrown.
	 
Supported  URL

Scheduler 
  rest/scheduler/login                       
	POST username&password, return sessionid
  rest/scheduler/status
    return the status of the scheduler
  rest/scheduler/jobs   	  
	list job by ids
  rest/scheduler/jobsinfo  
	list jobs by ids+additional data (class : rest_api.UserJobInfo)  
  rest/scheduler/state				
	scheduler state (SchedulerState)
  rest/scheduler/state/myjobsonly
	scheduler state containing only jobs of the current user

  rest/scheduler/jobs/{jobid}
	job state of job {jobid} (JobState class)
  rest/scheduler/jobs/{jobid}/result
	job result of job {jobid} (JobResult class)

  rest/scheduler/jobs/{jobid}/tasks
	list job's tasks by their names   
  rest/scheduler/jobs/{jobid}/taskstates
  	list of task's states for job {jobid} (TaskState class)
  rest/scheduler/jobs/{jobid}/tasks/{taskname}
  	describes task {taskname} of job {jobid} (TaskState class)
  rest/scheduler/jobs/{jobid}/tasks/{tasksid}/result
  	returns the taskResult of the task {taskname} of the job {id} (TaskResult Class)
  rest/scheduler/jobs/{jobid}/tasks/{taskname}/result/value
  	returns a binary file (mime-type:*/*) contains the value field of the TaskResult class
  rest/scheduler/jobs/{jobid}/tasks/{taskname}/result/log/all
    returns all the logs generated by the task
  rest/scheduler/jobs/{jobid}/tasks/{taskname}/result/log/err
  	returns the err  stream generated by the task
  rest/scheduler/jobs/{jobid}/tasks/{taskname}/result/log/out
  	returns the output stream generated by the task

  rest/scheduler/jobs/{jobid}/priority/byname/{name}
    @PUT change the priority of the job (use the name of the priority)
  rest/scheduler/jobs/{jobid}/priority/byvalue/{value}
    @PUT change the priority of the job (use the value of the priority)
  rest/scheduler/{jobid}/pause
     @PUT pause the job
  rest/scheduler/jobs/{jobid}/resume
     @PUT resume the job
  rest/scheduler/jobs/{jobid}
     @DELETE delete the job
  rest/scheduler/disconnect
     @PUT disconnect from the scheduler (and log off)
  
  rest/scheduler/submit
     @POST submit a XML job descriptor (file must be embedded in the body of the message)
  rest/scheduler/pause
  	 @PUT pause the scheduler
  rest/scheduler/stop
     @PUT stop the scheduler
  rest/scheduler/freeze
     @PUT freeze the scheduler
  rest/scheduler/start
     @PUT start the scheduler
  rest/scheduler/kill
     @PUT start the scheduler 
  rest/scheduler/linkrm 
      @POST form param=rmurl 
      link the scheduler to the Resource Manager available at the url 
  
  
Resource Manager
  rest/rm/login      POST username&password, return session id 
  rest/rm/state 
  rest/rm/monitoring
  rest/rm/node       POST nodeurl (add a node)



some command-line usage :

#### scheduler 

# login 

curl -d "username=demo&password=demo" http://localhost:8080/proactive_grid_cloud_portal/rest/scheduler/login

#submit a job

curl -H "sessionid:1" -F 'file=<Job_2_tasks.xml' http://localhost:8080/proactive_grid_cloud_portal/rest/scheduler/submit


#list jobs (pending, running, finished)
curl -H "sessionid:1" -H "Accept: application/json" http://localhost:8080/proactive_grid_cloud_portal/rest/scheduler/jobs/ 

# list job 10's tasks 

curl -H "sessionid:1" -H "Accept: application/json" http://localhost:8080/proactive_grid_cloud_portal/rest/scheduler/jobs/12/tasks


#delete a job

curl -X DELETE -H "sessionid:1" -H "Accept: application/json" http://localhost:8080/proactive_grid_cloud_portal/rest/scheduler/jobs/10

#result from a task 
curl -H "sessionid:1" -H "Accept: application/json" http://localhost:8080/proactive_grid_cloud_portal/rest/scheduler/jobs/1/tasks/task1/result


  ### Resource Manager

curl -d "username=admin&password=admin" http://localhost:8080/proactive_grid_cloud_portal/rest/rm/login

url -H "sessionid:1" -H "Accept: application/json" http://localhost:8080/proactive_grid_cloud_portal/rest/rm/state

curl -H "sessionid:1" -H "Accept: application/json" http://localhost:8080/proactive_grid_cloud_portal/rest/rm/monitoring

