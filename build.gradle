buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repo.activeeon.com/content/repositories/snapshots/' }
        maven { url 'http://repo.activeeon.com/content/repositories/releases/' }
        maven { url 'http://repo.activeeon.com/content/repositories/thirdparty/' }
    }

    dependencies {
        classpath 'org.objectweb.proactive:programming-build-utils:5.5.0-SNAPSHOT'
        // needed at runtime by AntStubGenerator...
        classpath 'org.objectweb.proactive:programming-core:5.5.0-SNAPSHOT'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'org.ow2.proactive_grid_cloud_portal'
    version = '1.5.0-SNAPSHOT'

    rootProject.buildscript.repositories.each {
        repositories.add(it)
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "http://repo.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }
}

project(':rest-api') {
    dependencies {
        compile 'org.jboss.resteasy:jaxrs-api:2.3.3.Final'
        compile 'org.jboss.resteasy:resteasy-jackson-provider:2.3.3.Final'
        compile 'org.jboss.resteasy:resteasy-multipart-provider:2.3.3.Final'
    }
}

project(':rest-server') {
    apply plugin: 'war'
    apply plugin: 'jetty'

    configurations { jaxDoclet }
    dependencies {
        compile 'org.jboss.resteasy:jaxrs-api:2.3.3.Final'
        compile 'org.jboss.resteasy:resteasy-jackson-provider:2.3.3.Final'
        compile 'org.jboss.resteasy:resteasy-multipart-provider:2.3.3.Final'

        compile 'org.rrd4j:rrd4j:2.0.7'
        compile 'net.sf.dozer:dozer:5.4.0'
        compile 'commons-io:commons-io:2.4'
        compile 'commons-codec:commons-codec:1.6'

        compile 'com.netiq:websockify:1.6-proactive'
        compile 'io.netty:netty:3.3.0.Final'

        compile 'org.ow2.proactive:scheduler-client:3.5.0-SNAPSHOT'
        compile 'org.ow2.proactive:rm-client:3.5.0-SNAPSHOT'
        compile 'org.ow2.proactive:rm-client:3.5.0-SNAPSHOT'
        compile 'org.objectweb.proactive:programming-extension-dataspaces:5.5.0-SNAPSHOT'

        compile project(':rest-api')

        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-core:1.9.5'
        testCompile 'com.googlecode.json-simple:json-simple:1.1'
        testCompile 'org.ow2.proactive:rm-server:3.5.0-SNAPSHOT'
        testCompile 'org.ow2.proactive:scheduler-server:3.5.0-SNAPSHOT'
        testCompile 'org.apache.httpcomponents:httpmime:4.2.1'
        testCompile 'org.jboss.resteasy:tjws:2.3.3.Final'
        testCompile 'org.fusesource:sigar:1.6.4'

        runtime 'net.bull.javamelody:javamelody-core:1.46.0'

        jaxDoclet 'com.lunatech.jax-doclets:doclets:0.10.1-proactive'
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive_grid_cloud_portal.scheduler.EventListener']
    }

    task jaxbDoc(type: Javadoc) {
        source([project, project(':rest-api')].collect { project -> project.sourceSets.main.allJava })
        destinationDir = file("$webAppDirName/doc/jaxbdocs")
        options.docletpath = configurations.jaxDoclet.files.asType(List) + configurations.compile.files.asType(List)
        options.classpath = options.docletpath
        options.doclet = "com.lunatech.doclets.jax.jaxb.JAXBDoclet"
        options.footer = 'Copyright 1997-2013 ActiveEon/INRIA/University of Nice-Sophia Antipolis'
        options.header = file('doc_header.html').text.replaceAll("[\r\n]+", " ")
    }

    task jaxrsDoc(type: Javadoc, dependsOn: jaxbDoc) {
        source = sourceSets.main.allJava
        destinationDir = file("$webAppDirName/doc/jaxrsdocs")
        options.links << '../jaxbdocs/'
        options.footer = 'Copyright 1997-2013 ActiveEon/INRIA/University of Nice-Sophia Antipolis'
        options.header = file('doc_header.html').text.replaceAll("[\r\n]+", " ")
        options.docletpath = configurations.jaxDoclet.files.asType(List) + configurations.compile.files.asType(List)
        options.classpath = options.docletpath
        options.doclet = "com.lunatech.doclets.jax.jaxrs.JAXRSDoclet"
    }
    war.dependsOn jaxrsDoc

    war {
        filesMatching('**/*.html') {
            it.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['rest_api.version': project.version])
        }
    }

    def functionalTestConfiguration = {
        forkEvery 1
        include 'functionaltests/**'
        systemProperties << ['restapi.test.scheduler.home': rootDir.absolutePath]
        systemProperties << ['restapi.test.rm.home': rootDir.absolutePath]
        systemProperties << ['proactive.home': rootDir.absolutePath]
        systemProperties << ['log4j.configuration': file("$rootDir/config/log4j/log4j-junit").toURL()]
        systemProperties << ['proactive.configuration': file("$rootDir/config/proactive/ProActiveConfiguration.xml")]
        systemProperties << ['java.security.policy': file("$rootDir/config/security.java.policy-server").absolutePath]
        systemProperties << ['proactive.runtime.ping': false]
        testLogging {
            exceptionFormat = 'full'
        }
        beforeTest { descriptor ->
            logger.lifecycle("Running: " + descriptor)
        }
    }

    test {
        exclude 'functionaltests/**'
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration

    task proActiveLibs(type: Copy) { // to launch a Scheduler node
        from configurations.testCompile
        into file("$rootDir/dist/lib")
    }
    functionalTest.dependsOn proActiveLibs
    clean.dependsOn cleanProActiveLibs
}

project(':rest-cli') {
    dependencies {
        compile 'commons-cli:commons-cli:1.2'
        compile 'commons-io:commons-io:2.4'
        compile 'jline:jline:1.0'

        compile 'org.apache.httpcomponents:httpclient:4.2.1'
        compile 'org.apache.httpcomponents:httpmime:4.2.1'

        compile 'org.ow2.proactive:common-api:3.5.0-SNAPSHOT'
        compile project(':rest-api')
    }
}
