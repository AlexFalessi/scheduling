apply plugin:'base'

buildscript {
    repositories {
        if (project.hasProperty('local')) mavenLocal()
        mavenCentral()
        maven { url 'http://repo.activeeon.com/content/repositories/snapshots/' }
        maven { url 'http://repo.activeeon.com/content/repositories/releases/' }
        maven { url 'http://repo.activeeon.com/content/repositories/thirdparty/' }
        maven { url 'http://spoon.gforge.inria.fr/repositories/releases/' }
    }

    dependencies {
        classpath "org.objectweb.proactive:programming-build-utils:${programmingVersion}"
        // needed at runtime by AntStubGenerator...
        classpath("org.objectweb.proactive:programming-core:${programmingVersion}") {
            exclude module: 'xercesImpl' // messing with documentation plugin
        }
        classpath 'org.ow2.proactive:documentation:1.0.0-SNAPSHOT'
        classpath 'org.hsudbrock:gradle-trang:0.1-proactive'
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
        classpath 'org.ow2.proactive:serialver-gradle:1.0-SNAPSHOT'
    }
}

allprojects {
    apply plugin: 'maven'

    group = 'org.ow2.proactive'
    version = schedulingVersion

    rootProject.buildscript.repositories.each {
        repositories.add(it)
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "http://repo.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }
}

ext.javaSubprojects = subprojects.findAll { new File(it.projectDir, "src").exists() }
ext.serialver = schedulingSerialver

configure(javaSubprojects) {
    apply plugin: 'java'

    sourceCompatibility = 1.6

    dependencies {
        compile 'log4j:log4j:1.2.14'
        runtime 'org.slf4j:slf4j-log4j12:1.6.6'
        testCompile 'junit:junit:4.11'
    }

    test {
        exclude 'functionaltests/**'
        exclude 'unittests/**'
        exclude 'unitTests/**'
    }

    task serialver(type: InsertSerialVersionUIDTask) {
        serialver = rootProject.serialver
    }
}

def functionalTestConfiguration = {

    forkEvery 1
    include 'functionaltests/**'
    include 'unittests/**'
    include 'unitTests/**'
    systemProperties << ['url': System.getProperty("url") ]
    systemProperties << ['test_slice': System.getProperty("test_slice") ]
    systemProperties << ['max_test_slice': System.getProperty("max_test_slice") ]
    systemProperties << ['pa.rm.home': rootDir.absolutePath]
    systemProperties << ['pa.scheduler.home': rootDir.absolutePath]
    systemProperties << ['pa.tests.consecutive': System.getProperty("os.name").toLowerCase().indexOf('win')!=-1?'false':'true']
    systemProperties << ['proactive.test.timeout': 600000]
    systemProperties << ['java.awt.headless': 'true']
    testLogging {
        exceptionFormat = 'full'
    }
    beforeTest { descriptor ->
        logger.lifecycle("Running: " + descriptor)
    }

    def clean = {
        logger.lifecycle("Killing all proactive processes")
        project.javaexec {
            main = "org.ow2.tests.ProcessCleaner"
            classpath = project.sourceSets.test.runtimeClasspath
        }
    }

    finalizedBy project.task (project.name+'-clean', {doLast clean})
    doFirst clean
}

project(':scheduler:scheduler-api') {
    dependencies {
        compile "org.objectweb.proactive:programming-annotation:${programmingVersion}"

        compile 'it.sauronsoftware.cron4j:cron4j:2.2.5'
        compile 'isorelax:isorelax:20030108'
        compile 'commons-collections:commons-collections:3.2'
        compile 'msv:msv:20050913'

        compile project(':common-api')

        runtime 'org.codehaus.woodstox:woodstox-core-lgpl:4.1.2'
        runtime 'msv:xsdlib:20050913'
        runtime 'msv:relaxngDatatype:20030807'
    }

    apply plugin: 'trang'
    task convertSchemas
    ['3.0', '3.1', '3.2', 'dev'].each { schemaVersion ->
        task("convertSchemasXsd-$schemaVersion", type: org.hsudbrock.tranggradleplugin.TrangTask) {
            sourceDirectory = project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}")
            targetDirectory = sourceDirectory
            doLast {
                project.delete project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}/xsi.xsd")
            }
        }
        task("convertSchemasRng-$schemaVersion", type: org.hsudbrock.tranggradleplugin.TrangTask) {
            sourceDirectory = project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}")
            targetDirectory = sourceDirectory
            targetExtension ='rng'
            doLast {
                project.delete project.file("src/main/resources/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/${schemaVersion}/xsi.xsd")
            }
        }
        task("convertSchemas-$schemaVersion").dependsOn << ["convertSchemasXsd-$schemaVersion", "convertSchemasRng-$schemaVersion"]
        convertSchemas.dependsOn << "convertSchemasXsd-$schemaVersion"
        convertSchemas.dependsOn << "convertSchemasRng-$schemaVersion"
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.common.Scheduler']
    }
}

project('common-api') {
    dependencies {
        compile "org.objectweb.proactive:programming-annotation:${programmingVersion}"
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scripting.ScriptResult']
    }
}


project(':scheduler:scheduler-client') {
    dependencies {
        compile "org.objectweb.proactive:programming-annotation:${programmingVersion}"

        compile project(':scheduler:scheduler-api')
        compile project(':common-client')
    }
}

project('common-client') {
    dependencies {
        compile 'commons-codec:commons-codec:1.6'
        compile 'org.rrd4j:rrd4j:2.0.7'

        compile "org.objectweb.proactive:programming-core:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-annotation:${programmingVersion}"

        compile project(':common-api')
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scripting.ScriptHandler',
                'org.ow2.proactive.jmx.provider.ro.ROServerImpl',
                'org.ow2.proactive.jmx.provider.ro.ROConnection']
    }
}

project('rm:rm-client') {
    dependencies {
        compile "org.objectweb.proactive:programming-annotation:${programmingVersion}"
        compile "org.objectweb.proactive:programming-core:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-annotation:${programmingVersion}"

        compile project(':common-client')
    }
    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.utils.NodeSet',
                'org.ow2.proactive.resourcemanager.frontend.ResourceManager',
                'org.ow2.proactive.resourcemanager.authentication.RMAuthentication',
                'org.ow2.proactive.resourcemanager.common.event.RMInitialState',
                'org.ow2.proactive.resourcemanager.common.RMState',
                'org.ow2.proactive.resourcemanager.common.util.RMProxyUserInterface',
                'org.ow2.proactive.resourcemanager.common.util.RMListenerProxy',
                'org.ow2.proactive.resourcemanager.frontend.topology.pinging.HostsPinger',
                'org.ow2.proactive.resourcemanager.frontend.topology.pinging.NodesPinger',
                'org.ow2.proactive.resourcemanager.frontend.topology.pinging.Pinger',
                'org.ow2.proactive.resourcemanager.frontend.RMMonitoring']
    }
}

project(':rm:rm-node') {
    dependencies {
        compile files("${rootDir}/lib/node/winp/winp-1.17-patched.jar")
        compile 'net.java.dev.jna:jna:3.4.0'

        compile 'commons-cli:commons-cli:1.1'
        compile files("${rootDir}/lib/node/sigar/sigar.jar")

        compile "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}"

        compile project(':common-client')
        compile project(':rm:rm-client')

        runtime fileTree(dir: "${rootDir}/lib/node/sigar/", exclude: "*.jar")

        runtime 'org.jruby:jruby:1.7.4'
        runtime 'org.python:jython:2.5.4-rc1'
        runtime 'org.codehaus.groovy:groovy-all:2.1.6'
        runtime 'jsr223:jsr223-nativeshell:0.2'
    }

}

project(':rm:rm-cli') {
    apply plugin: 'java-library-distribution'

    dependencies {
        compile "org.objectweb.proactive:programming-core:${programmingVersion}"

        compile project(':common-client')
        compile project(':rm:rm-client')
        compile project(':common-cli')
    }
}

project(':scheduler:scheduler-cli') {
    apply plugin: 'java-library-distribution'
    dependencies {
        compile "org.objectweb.proactive:programming-core:${programmingVersion}"
        compile project(':common-client')
        compile project(':scheduler:scheduler-client')
        compile project(':common-cli')
    }
}

project('scheduler:scheduler-server') {
    apply plugin: 'java-library-distribution'
    dependencies {
        compile 'commons-cli:commons-cli:1.1'
        compile 'commons-io:commons-io:2.4'
        compile 'javax.mail:mail:1.4.7'
        compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
        compile 'org.hibernate:hibernate-core:4.1.7.Final'

        compile "org.objectweb.proactive:programming-core:${programmingVersion}"

        compile project(':common-api')
        compile project(':common-client')
        compile project(':scheduler:scheduler-api')
        compile project(':scheduler:scheduler-client')
        compile project(':scheduler:scheduler-node')
        compile project(':rm:rm-server')

        testCompile 'org.mockito:mockito-core:1.9.5'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'com.h2database:h2:1.3.167'
        testCompile 'org.codehaus.groovy:groovy-all:2.1.6'
        testCompile 'winp:winp:1.17-patched'
        testCompile files("${System.properties['java.home']}/../lib/tools.jar")

        testCompile project(':rm:rm-server').sourceSets.test.output // to get shared test classes
        testCompile project(':rm:rm-infrastructure:rm-infrastructure-gcm')
        testCompile project(':rm:rm-policy:rm-policy-scheduler')

        runtime 'org.hibernate:hibernate-c3p0:4.1.7.Final'
        runtime 'org.apache.derby:derby:10.8.2.2'
        runtime 'mysql:mysql-connector-java:5.1.16'
        runtime "org.objectweb.proactive:programming-extension-rmissl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"

        runtime project(':rest:rest-server')
    }

    task('functionalTest', type:Test).configure functionalTestConfiguration

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.core.SchedulerFrontend']
    }

    artifacts {
        archives testJar
    }
}

project('scheduler:scheduler-node') {
    apply plugin: 'java-library-distribution'
    apply plugin: 'gradle-one-jar'
    dependencies {
        compile(
                "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-processbuilder:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}",

                project(':scheduler:scheduler-client'),
                project(':rm:rm-node'),
        )
        // required by ForkedJavaExecutable
        runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        // TODO add all protocols

        runtime fileTree(dir: "${rootDir}/lib/node/winp/", exclude: "*.jar")
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive.scheduler.common.TaskTerminateNotification']
    }

    task standaloneJar(type: OneJar) {
        mainClass = 'org.ow2.proactive.resourcemanager.utils.RMNodeStarter'
        binLib = fileTree(dir: "${rootDir}/lib/node/", exclude: "**/*.jar")
        additionalDir = file('src/main/resources')
        manifest {
            attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
            attributes 'One-Jar-Expand': 'lib,binlib,main' // expand jars for subprocesses (forked tasks)
        }
    }
    build.dependsOn standaloneJar
    artifacts {
        archives standaloneJar
    }
}

project('common-cli') {
    dependencies {
        compile 'jline:jline:2.11'
        compile project(':common-client')
    }
}

project('rm:rm-server') {
    apply plugin: 'java-library-distribution'
    dependencies {
        compile(
                'commons-cli:commons-cli:1.1',
                'it.sauronsoftware.cron4j:cron4j:2.2.5',
                'org.hibernate:hibernate-core:4.1.7.Final',
                'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',

                "org.objectweb.proactive:programming-core:${programmingVersion}",
                "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}",

                project(':common-api'),
                project(':common-client'),
                project(':rm:rm-client'),
                project(':rm:rm-node'),
        )
        testCompile project(':rm:rm-infrastructure:rm-infrastructure-gcm')
        testCompile 'org.jruby:jruby:1.7.4'
        testCompile 'org.python:jython:2.5.4-rc1'

        runtime 'org.hibernate:hibernate-c3p0:4.1.7.Final'
        runtime 'org.apache.derby:derby:10.8.2.2'
        runtime 'mysql:mysql-connector-java:5.1.16'
        runtime "org.objectweb.proactive:programming-extension-rmissl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}"
    }

    task('functionalTest', type:Test).configure functionalTestConfiguration

    task stub(type: StubTask) {
        classes = [
                'org.ow2.proactive.resourcemanager.authentication.RMAuthenticationImpl',
                'org.ow2.proactive.resourcemanager.frontend.RMMonitoringImpl',
                'org.ow2.proactive.resourcemanager.selection.statistics.ProbablisticSelectionManager',
                'org.ow2.proactive.resourcemanager.nodesource.NodeSource',
                'org.ow2.proactive.resourcemanager.nodesource.dataspace.DataSpaceNodeConfigurationAgent',
                'org.ow2.proactive.resourcemanager.core.RMCore',
                'org.ow2.proactive.resourcemanager.nodesource.policy.NodeSourcePolicy',
                'org.ow2.proactive.resourcemanager.nodesource.RMNodeConfigurator',
                'org.ow2.proactive.resourcemanager.utils.ClientPinger',
                'org.ow2.proactive.resourcemanager.cleaning.NodesCleaner'
        ]
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts {
        archives testJar
    }
}

project('rm:rm-infrastructure:rm-infrastructure-ec2') {
    dependencies {
        compile 'com.google.code.typica:typica:1.7.2'
        compile project(':rm:rm-server')
    }
}
project('rm:rm-infrastructure:rm-infrastructure-gcm') {
    dependencies {
        compile "org.objectweb.proactive:programming-extension-gcmdeployment:${programmingVersion}"
        compile project(':rm:rm-server')
    }
}
project('rm:rm-infrastructure:rm-infrastructure-winhpc') {
    dependencies {
        compile 'org.apache.axis2:axis2:1.4'
        compile 'org.apache.ws.commons.axiom:axiom-api:1.2.7'
        compile 'winhpc:WinHPCWebserviceStubs:1.0-proactive'
        compile project(':rm:rm-server')
    }
}

project('rm:rm-policy:rm-policy-scheduler') {
    dependencies {
        compile project(':scheduler:scheduler-client')
        compile project(':rm:rm-server')
    }
}

project(':scheduler:filessplitmerge') {
    dependencies {
        compile project(':scheduler:scheduler-server')
    }
}

project(':scheduler:dataspace-smartproxy') {
    dependencies {
        compile 'org.fusesource.jdbm:jdbm:2.0.1'
        compile project(':scheduler:scheduler-server')
        testCompile project(':scheduler:scheduler-server').sourceSets.test.output
        // to get shared test classes
        testCompile project(':rm:rm-server').sourceSets.test.output // to get shared test classes
    }

    task('functionalTest', type:Test).configure functionalTestConfiguration
}

project(':scheduler:mapreduce') {
    dependencies {
        compile 'org.apache.hadoop:hadoop-core:0.20.2'
        compile project(':scheduler:scheduler-server')
        testCompile project(':scheduler:scheduler-server')
        testCompile project(':scheduler:scheduler-server').sourceSets.test.output
        // to get shared test classes
        testCompile project(':rm:rm-server').sourceSets.test.output // to get shared test classes
    }

    task('functionalTest', type:Test).configure functionalTestConfiguration
    functionalTest.enabled = false

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }
}

project(':doc:Resourcing') {
    dependencies {
        compile project(':rm:rm-server')
    }
}

project('performance') {
    dependencies {
        compile 'logkit:logkit:2.0'
        compile 'org.apache.jmeter:ApacheJMeter_java:2.9'
        compile project(':common-client')
        compile project(':scheduler:scheduler-api')
        compile project(':scheduler:scheduler-client')
        compile project(':scheduler:scheduler-node')
        compile project(':scheduler:scheduler-server')
        compile project(':rm:rm-client')
        compile "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
    }
}

configurations {
    distLib
}

dependencies {
    distLib(project(':scheduler:scheduler-server')) {
        exclude group: 'javassist', module: 'javassist' // to avoid duplicate (artifact named differently)
    }
    distLib project('rm:rm-policy:rm-policy-scheduler')
    distLib project(':scheduler:scheduler-cli')
    distLib project(':scheduler:scheduler-node')
    distLib project(':rm:rm-server')
    distLib project(':rm:rm-cli')
    distLib(project(':rest:rest-server')) {
        exclude group: 'javassist', module: 'javassist' // to avoid duplicate (artifact named differently)
    }
}

task proActiveLibs(type: Sync) {
    from configurations.distLib

    [project(':rm:rm-server'), project(':scheduler:scheduler-server')].each {
        from it.configurations.archives.artifacts.files.files
        if (it.tasks.findByName('testJar'))
            from it.testJar.outputs
    }
//            from file(project.rootProject.buildscript.configurations.classpath.find {
//                it.name.contains("build-utils")
//            })
    into file("$rootDir/dist/lib")
}

defaultTasks 'proActiveLibs'
task build
build.dependsOn 'proActiveLibs'

subprojects {
    tasks.withType(Test).matching { it.name == 'functionalTest' }*.dependsOn proActiveLibs
}

task staticFiles(type: Zip) {
    from "."
    include "config/**", "bin/**", "samples/**", "addons/**", "LICENSE*", "README*"
    classifier "static"
}

task customLibs(type: Zip) {
    from "lib/node/winp", "lib/node/sigar"
    classifier "libs"
}

artifacts {
    archives staticFiles, customLibs
}

