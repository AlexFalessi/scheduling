<?xml version="1.0" encoding="UTF-8"?>
<!-- ProActive Parallel Suite(TM): The Java(TM) library for
 Parallel, Distributed, Multi-Core Computing for 
 Enterprise Grids & Clouds

 Copyright (C) 1997-2011 INRIA/University of
                 Nice-Sophia Antipolis/ActiveEon
 Contact: proactive@ow2.org or contact@activeeon.com

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Affero General Public License
 as published by the Free Software Foundation; version 3 of
 the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 USA

 If needed, contact us to obtain a release under GPL Version 2 or 3
 or a different license than the AGPL.

  Initial developer(s):               The ActiveEon Team
                        http://www.activeeon.com/
  Contributor(s):

 $ACTIVEEON_INITIAL_DEV$ -->

<project name="REST API Performance">
    <property file="${basedir}/common.test.properties" />
    <property file="${basedir}/rm.test.properties" />
    <property file="${basedir}/scheduler.test.properties" />
    <property file="${basedir}/rest.test.properties" />
    <property name="test.deploy.env.local.javaPath" value="${javaPath}" />
    <property name="test.deploy.env.local.schedulingPath" value="${schedulingPath}" />
    <property name="test.deploy.env.pamr" value="local" />
    <property name="test.deploy.env.rm" value="local" />
    <property name="test.deploy.env.rmNodes" value="local" />
    <property name="test.deploy.env.scheduler" value="local" />
    <property name="test.deploy.env.appserver" value="local" />
    <property name="scheduling.dir" value="${schedulingPath}" />
    <property name="scheduling.perf.dir" value="${scheduling.dir}/performance" />
    <property name="scheduling.perf.classes" value="${scheduling.dir}/rest/performance/build/classes/main" />
    <property name="scheduling.perf.buildfile" value="${scheduling.perf.dir}/build.xml" />
    <property name="scheduling_rest.client.dir" value="${basedir}/../client" />
    <property name="tmp" value="${basedir}/tmp" />
    <property name="classes.dir" value="${basedir}/build/classes/main" />

    <property name="scheduler.test.scenario" value="scheduler1" />
    <property name="target.test.scenario" value="rm-portal-clients" />

    <property name="allTestHosts" value="${scheduler.deploy.schedulerHost},${rm.deploy.rmHost},${rm.deploy.rmNodesHosts},${createNodeSourceHosts},${test.deploy.pamr.startNewRouter.host},${appserver.deploy.hostname}" />

    <!-- setup jmeter ant task -->
    <property name="ant_jmeter_regexp" value="extras/ant-jmeter-*.jar" />
    <path id="ant-jmeter-path">
        <fileset dir="${jmeterhome}">
            <include name="${ant_jmeter_regexp}" />
        </fileset>
    </path>
    <property name="antJMeterJar" refid="ant-jmeter-path" />
    <available type="file" file="${antJMeterJar}" property="antJMeterJar.exists" />
    <fail message="Could not find ant-jmeter jar using regexp '${jmeterhome}/${ant_jmeter_regexp}'" unless="antJMeterJar.exists" />
    <taskdef name="jmeter" classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" classpath="${antJMeterJar}" />

    <path id="compile.classpath">
        <fileset dir="${scheduling.dir}/dist/lib">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${scheduling_rest.client.dir}/lib">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${scheduling.perf.dir}/lib">
            <include name="*.jar" />
        </fileset>
        <pathelement location="${scheduling.perf.classes}" />
    </path>

    <path id="xslt.classpath">
        <fileset dir="${jmeterhome}/lib" includes="xalan*.jar" />
        <fileset dir="${jmeterhome}/lib" includes="serializer*.jar" />
    </path>

    <macrodef name="propertycopy">
        <attribute name="name" />
        <attribute name="from" />
        <sequential>
            <property name="@{name}" value="${@{from}}" />
        </sequential>
    </macrodef>

    <macrodef name="extended-test-deployer-macro">
        <attribute name="startPamrIfNeeded" />
        <attribute name="startRM" />
        <attribute name="startScheduler" />
        <attribute name="startAppServer" />
        <sequential>
	    <echo message="${appserver.deploy.warfile}" />
            <fail message="'appserver.deploy.warfile' property is not set" unless="appserver.deploy.warfile" />
            <fail message="'appserver.deploy.tomcathome' property is not set" unless="appserver.deploy.tomcathome" />
            <java classname="org.ow2.proactive.perftests.rest.deployer.TestServerDeployer" fork="true" failonerror="true" maxmemory="512m">
                <classpath>
                    <path refid="compile.classpath" />
                    <pathelement location="${classes.dir}" />
                </classpath>
                <arg value="@{startPamrIfNeeded}" />
                <arg value="@{startRM}" />
                <arg value="@{startScheduler}" />
                <arg value="@{startAppServer}" />
                <arg value="${basedir}/tmp/test.deploy.result.properties" />
                <!-- hosts where test processes are killed in case if deployment fails -->
                <jvmarg value="-DtestHosts=${allTestHosts}" />
                <jvmarg value="-Dtest.deploy.env.pamr=${test.deploy.env.pamr}" />
                <jvmarg value="-Dtest.deploy.env.rm=${test.deploy.env.rm}" />
                <jvmarg value="-Dtest.deploy.env.rmNodes=${test.deploy.env.rmNodes}" />
                <jvmarg value="-Dtest.deploy.env.scheduler=${test.deploy.env.scheduler}" />
                <jvmarg value="-Dtest.deploy.env.appserver=${test.deploy.env.appserver}" />
                <jvmarg value="-Dtest.deploy.env.local.javaPath=${test.deploy.env.local.javaPath}" />
                <jvmarg value="-Dtest.deploy.env.local.schedulingPath=${test.deploy.env.local.schedulingPath}" />
                <jvmarg value="-Dtest.deploy.env.local.schedulingRestPath=${test.deploy.env.local.schedulingRestPath}" />
                <!-- Parameters required to setup tomcat server on target host -->
                <jvmarg value="-Dtest.deploy.env.${test.deploy.env.appserver}.schedulingPath=${appserver.deploy.schedulingPath}" />
                <jvmarg value="-Dtest.deploy.env.${test.deploy.env.appserver}.javaPath=${appserver.deploy.javaPath}" />
                <jvmarg value="-Dtest.deploy.env.${test.deploy.env.appserver}.schedulingRestPath=${appserver.deploy.schedulingRestPath}" />
                <jvmarg value="-Dtest.deploy.env.${test.deploy.env.appserver}.warfile=${appserver.deploy.warfile}" />
                <jvmarg value="-Dtest.deploy.env.${test.deploy.env.appserver}.tomcathome=${appserver.deploy.tomcathome}" />
                <jvmarg value="-Dtest.deploy.env.${test.deploy.env.appserver}.catalina_opts=${appserver.deploy.catalina_opts}" />
                <jvmarg value="-Dtest.deploy.protocol=${test.deploy.protocol}" />
                <jvmarg value="-Dtest.deploy.multiprotocol.protocol=${test.deploy.multiprotocol.protocol}" />
                <jvmarg value="-Dtest.deploy.multiprotocol.additional_protocols=${test.deploy.multiprotocol.additional_protocols}" />
                <jvmarg value="-Dtest.deploy.multiprotocol.protocols_order=${test.deploy.multiprotocol.protocols_order}" />
                <!-- needed if tests should use already running PAMR router -->
                <jvmarg value="-Dtest.deploy.pamr.existingRouterHost=${test.deploy.pamr.existingRouterHost}" />
                <jvmarg value="-Dtest.deploy.pamr.existingRouterPort=${test.deploy.pamr.existingRouterPort}" />
                <!-- properties used to start PAMR router -->
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.host=${test.deploy.pamr.startNewRouter.host}" />
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.port=${test.deploy.pamr.startNewRouter.port}" />
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.reservedIds=0:resource_manager,1:scheduler" />
                <jvmarg value="-Dtest.deploy.pamr.startNewRouter.args=${test.deploy.pamr.startNewRouter.args}" />
                <jvmarg value="-Drm.deploy.pamr.serverReservedId=0:resource_manager" />
                <jvmarg value="-Dscheduler.deploy.pamr.serverReservedId=1:scheduler" />
                <jvmarg value="-Dappserver.deploy.pamr.serverReservedId=2:appserver" />
                <jvmarg value="-Drm.deploy.rmHost=${rm.deploy.rmHost}" />
                <jvmarg value="-Drm.deploy.dropDB=${rm.deploy.dropDB}" />
                <jvmarg value="-Drm.deploy.javaOpts=${rm.deploy.javaOpts}" />
                <jvmarg value="-Drm.deploy.rmNodesHosts=${rm.deploy.rmNodesHosts}" />
                <jvmarg value="-Drm.deploy.rmNodesPerHosts=${rm.deploy.rmNodesPerHosts}" />
                <jvmarg value="-Drm.deploy.rmNodesSourcesNumber=${rm.deploy.rmNodesSourcesNumber}" />
                <jvmarg value="-Drm.deploy.testNodes=${createNodeSourceHosts}" />
                <jvmarg value="-Dscheduler.deploy.schedulerHost=${scheduler.deploy.schedulerHost}" />
                <jvmarg value="-Dscheduler.deploy.dropDB=${scheduler.deploy.dropDB}" />
                <jvmarg value="-Dscheduler.deploy.rmUrl=${scheduler.deploy.rmUrl}" />
                <jvmarg value="-Dscheduler.deploy.javaOpts=${scheduler.deploy.javaOpts}" />
                <jvmarg value="-Dappserver.deploy.hostname=${appserver.deploy.hostname}" />
                <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
            </java>
            <property file="${basedir}/tmp/test.deploy.result.properties" />
        </sequential>
    </macrodef>

    <macrodef name="run-rest-jmeter-test">
        <attribute name="testplan" />
        <attribute name="targetAppServerUrl" />
        <attribute name="clientProActiveConfig" />
        <sequential>
            <delete file="${basedir}/build/results/@{testplan}.jtl" />
            <delete file="${basedir}/build/results/@{testplan}.html" />
            <jmeter failureProperty="rest-@{testplan}-failed" jmeterhome="${jmeterhome}" testplan="${basedir}/jmeter/testplans/@{testplan}.jmx" resultlog="${basedir}/build/results/@{testplan}.jtl">
                <jvmarg value="-Djava.security.policy=${basedir}/config/grant.all.java.policy" />
                <jvmarg value="-Dproactive.configuration=@{clientProactiveConfig}" />
                <property name="search_paths" value="${classes.dir}" />
                <property name="jmeter.save.saveservice.output_format" value="xml" />
                <property name="restRmUrl" value="@{targetAppServerUrl}" />
                <property name="restSchedulerUrl" value="@{targetAppServerUrl}" />
                <property name="testTime" value="${testTime}" />
                <property name="stopOnError" value="${stopOnError}" />
                <property name="schedulerPortalUserNumber" value="${schedulerPortalUserNumber}" />

                <jmeterarg value="-j" />
                <jmeterarg value="${basedir}/build/results/jmeter.log" />
            </jmeter>
            <xslt classpathref="xslt.classpath" in="${basedir}/build/results/@{testplan}.jtl" out="${basedir}/build/results/@{testplan}.html" style="${basedir}/jmeter/config/jmeter-results-report_21.xsl" />
            <xslt classpathref="xslt.classpath" in="${basedir}/build/results/@{testplan}.jtl" out="${basedir}/build/results/@{testplan}_detail.html" style="${basedir}/jmeter/config/jmeter-results-detail-report_21.xsl" />
        </sequential>
    </macrodef>

    <target name="clean">
        <ant inheritAll="false" antfile="${scheduling.perf.buildfile}" target="clean">
            <property name="tmp" value="${scheduling.perf.dir}/tmp" />
        </ant>
        <delete dir="${classes.dir}" />
        <delete dir="${tmp}" />
    </target>

    <target name="compile.tests" unless="compile.tests.disable">
        <ant inheritAll="false" antfile="${scheduling.perf.buildfile}" target="compile.tests" />
        <taskdef name="stubGenerator" classname="ant.AntStubGenerator" classpathref="compile.classpath" />
        <typedef name="class" classname="ant.AntStubGeneratorClass" classpathref="compile.classpath" />
        <mkdir dir="${classes.dir}" />
        <javac srcdir="${basedir}/src" destdir="${classes.dir}" debug="true" includeAntRuntime="false">
            <classpath refid="compile.classpath" />
        </javac>
    </target>

    <target name="deploy-all" depends="compile.tests" description="Deploy RM, Scheduler and AppServer">
        <extended-test-deployer-macro startpamrifneeded="true" startrm="true" startscheduler="true" startappserver="true" />
    </target>

    <target name="kill-test-processes">
        <ant inheritAll="false" antfile="${scheduling.perf.buildfile}" target="kill-test-processes">
            <property name="allTestHosts" value="${allTestHosts}" />
        </ant>
    </target>

    <target name="deploy-and-execute-test" description="Deploy all servers and execute the test scenario">
        <ant inheritAll="false" antfile="${scheduling.perf.buildfile}" target="copy.libs.to.jmeter" />
        <antcall target="deploy-all" />
        <antcall target="populate-scheduler" />
        <loadproperties srcFile="${basedir}/tmp/test.deploy.result.properties">
            <filterchain>
                <linecontains>
                    <contains value="appserver.deploy.result.serverUrl" />
                </linecontains>
            </filterchain>
        </loadproperties>
        <run-rest-jmeter-test testplan="${target.test.scenario}" targetappserverurl="${appserver.deploy.result.serverUrl}" clientproactiveconfig="${basedir}/config/DefaultClientProActiveConfiguration.xml" />
        <antcall target="kill-test-processes" />
        <!-- <fail if="rest-${target.test.scenario}-failed" message="JMeter test failed" /> -->
    </target>

    <target name="execute-test">
    	<!--<loadproperties srcFile="${basedir}/tmp/test.deploy.result.properties">-->
    	    <!--<filterchain>-->
    	        <!--<linecontains>-->
    	            <!--<contains value="appserver.deploy.result.serverUrl" />-->
    	        <!--</linecontains>-->
    	    <!--</filterchain>-->
    	<!--</loadproperties>-->
        <run-rest-jmeter-test testplan="${target.test.scenario}" targetappserverurl="${appserver.deploy.result.serverUrl}" clientproactiveconfig="${basedir}/config/DefaultClientProActiveConfiguration.xml" />
    </target>

    <target name="populate-scheduler" if="populate.scheduler">
        <loadproperties srcFile="${basedir}/tmp/test.deploy.result.properties">
            <filterchain>
                <linecontains>
                    <contains value="scheduler.deploy.result.serverUrl" />
                </linecontains>
            </filterchain>
        </loadproperties>
        <run-scheduler-jmeter-test testplan="${scheduler.test.scenario}" targetSchedulerUrl="${scheduler.deploy.result.serverUrl}" clientproactiveconfig="${basedir}/tmp/ProActiveConfiguration.xml" />
        <!-- <fail if="scheduler-scheduler1-failed" message="JMeter test failed" /> -->
    </target>
</project>
