def functionalTestConfiguration = {
    forkEvery 1
    include 'functionaltests/**'
    systemProperties << ['rest.deploy': 'false']
    systemProperties << ['pa.scheduler.home': rootDir.absolutePath]
    systemProperties << ['pa.rm.home': rootDir.absolutePath]
    systemProperties << ['proactive.home': rootDir.absolutePath]
    systemProperties << ['proactive.configuration': file("$rootDir/config/proactive/ProActiveConfiguration.xml")]
    systemProperties << ['java.security.policy': file("$rootDir/config/security.java.policy-server").absolutePath]
    systemProperties << ['test_slice': System.getProperty("test_slice")]
    systemProperties << ['max_test_slice': System.getProperty("max_test_slice")]
    systemProperties << ['proactive.runtime.ping': false]
    testLogging {
        exceptionFormat = 'full'
    }
    beforeTest { descriptor ->
        logger.lifecycle("Running: " + descriptor)
    }
}

// dependencies
ext.functionalTestDependencies = [
        'com.googlecode.json-simple:json-simple:1.1',
        'com.jayway.awaitility:awaitility:1.6.0',
        project(":scheduler:scheduler-server"),
        project(':rm:rm-server').sourceSets.test.output
]

subprojects {
    group = 'org.ow2.proactive_grid_cloud_portal'
}

project(':rest:rest-api') {
    dependencies {
        compile 'org.jboss.resteasy:jaxrs-api:3.0.6.Final'
        compile 'org.jboss.resteasy:resteasy-jackson-provider:3.0.6.Final'
        compile 'org.jboss.resteasy:resteasy-multipart-provider:3.0.6.Final'
    }
}

project(':rest:rest-server') {
    apply plugin: 'war'
    apply plugin: 'jetty'

    configurations {
        jaxDoclet
    }
    dependencies {
        compile 'org.jboss.resteasy:jaxrs-api:3.0.6.Final'
        compile 'org.jboss.resteasy:resteasy-jackson-provider:3.0.6.Final'
        compile 'org.jboss.resteasy:resteasy-multipart-provider:3.0.6.Final'

        compile 'org.rrd4j:rrd4j:2.0.7'
        compile 'net.sf.dozer:dozer:5.4.0'
        compile 'commons-io:commons-io:2.4'
        compile 'commons-codec:commons-codec:1.6'

        compile 'com.netiq:websockify:1.6-proactive'
        compile 'io.netty:netty:3.3.0.Final'

        compile 'org.atmosphere:atmosphere-runtime:2.1.1'

        compile project(":scheduler:scheduler-client")
        compile project(":rm:rm-client")
        compile "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}"

        compile project(':rest:rest-api')

        testCompile functionalTestDependencies
        testCompile 'org.apache.httpcomponents:httpmime:4.2.1'
        testCompile 'org.jboss.resteasy:tjws:3.0.6.Final'
        testCompile 'org.mockito:mockito-core:1.9.5'
        testCompile 'org.eclipse.jetty:test-jetty-servlet:8.1.15.v20140411'

        runtime 'org.eclipse.jetty.aggregate:jetty-websocket:8.1.15.v20140411'
        runtime 'org.eclipse.jetty.aggregate:jetty-webapp:8.1.15.v20140411'
        runtime 'javax.servlet:javax.servlet-api:3.0.1'

        runtime "org.objectweb.proactive:programming-extension-rmissl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-amqp:${programmingVersion}"
        runtime "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"

        jaxDoclet 'com.lunatech.jax-doclets:doclets:0.10.1-proactive'
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive_grid_cloud_portal.scheduler.EventListener']
    }

    task jaxbDoc(type: Javadoc) {
        enabled = System.getProperty("java.specification.version") != "1.8"
        source([project, project(':rest:rest-api')].collect { project -> project.sourceSets.main.allJava })
        destinationDir = file("$webAppDirName/doc/jaxbdocs")
        options.docletpath = configurations.jaxDoclet.files.asType(List) + configurations.compile.files.asType(List)
        options.classpath = options.docletpath
        options.doclet = "com.lunatech.doclets.jax.jaxb.JAXBDoclet"
        options.footer = 'Copyright 1997-2014 ActiveEon/INRIA/University of Nice-Sophia Antipolis'
        options.header = file('doc_header.html').text.replaceAll("[\r\n]+", " ")
    }

    task jaxrsDoc(type: Javadoc, dependsOn: jaxbDoc) {
        enabled = System.getProperty("java.specification.version") != "1.8"
        source([project, project(':rest:rest-api')].collect { project -> project.sourceSets.main.allJava })
        destinationDir = file("$webAppDirName/doc/jaxrsdocs")
        options.links << '../jaxbdocs/'
        options.footer = 'Copyright 1997-2014 ActiveEon/INRIA/University of Nice-Sophia Antipolis'
        options.header = file('doc_header.html').text.replaceAll("[\r\n]+", " ")
        options.docletpath = configurations.jaxDoclet.files.asType(List) + configurations.compile.files.asType(List)
        options.classpath = options.docletpath
        options.doclet = "com.lunatech.doclets.jax.jaxrs.JAXRSDoclet"
    }
    war.dependsOn jaxrsDoc, stub

    war {
        def schedulerNodeJar = project(":scheduler:scheduler-node").standaloneJar
        from schedulerNodeJar
        rename(schedulerNodeJar.outputs.files.singleFile.name, 'node.jar')

        filesMatching('**/*.html') {
            it.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['rest_api.version': project.version])
        }
    }

    test {
        exclude 'functionaltests/**'
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration

    functionalTest.dependsOn rootProject.dist
    clean.dependsOn rootProject.cleanDist

    task proActiveWar(type: Sync, dependsOn: war) {
        from "$webAppDirName"

        def schedulerNodeJar = project(":scheduler:scheduler-node").standaloneJar
        from schedulerNodeJar

        into file("$rootDir/dist/war/rest")

        rename(schedulerNodeJar.outputs.files.singleFile.name, 'node.jar')

        filesMatching('**/*.html') {
            it.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['rest_api.version': project.version])
        }
    }
    clean.dependsOn cleanProActiveWar

    rootProject.dist.dependsOn project.proActiveWar

    artifacts {
        jar
    }
}

project(':rest:rest-cli') {

    dependencies {
        compile 'commons-cli:commons-cli:1.2'
        compile 'commons-io:commons-io:2.4'
        compile 'jline:jline:2.11'

        compile 'org.apache.httpcomponents:httpclient:4.2.1'
        compile 'org.apache.httpcomponents:httpmime:4.2.1'

        compile project(":common-api")
        compile project(":common-cli")
        compile project(':rest:rest-api')
    }

}

project(':rest:rest-client') {

    apply plugin: 'java-library-distribution'

    dependencies {
        compile 'commons-cli:commons-cli:1.2'
        compile 'commons-io:commons-io:2.4'
        compile 'jline:jline:2.11'
        compile 'org.apache.httpcomponents:httpclient:4.2.1'
        compile 'org.apache.httpcomponents:httpmime:4.2.1'
        compile 'org.atmosphere:wasync:1.3.2'

        compile project(":common-api")
        compile project(":scheduler:scheduler-api")
        compile project(':rest:rest-api')

        runtime 'xerces:xercesImpl:2.8.1'

        testCompile functionalTestDependencies
        testCompile project(':rest:rest-server').sourceSets.test.output
    }

    test {
        exclude 'functionaltests/**'
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration

    functionalTest.dependsOn rootProject.dist
    clean.dependsOn rootProject.cleanDist
}

project(':rest:rest-dataspace-smartproxy') {
    dependencies {
        compile 'org.apache.commons:commons-vfs2:2.0'

        compile project(':scheduler:dataspace-smartproxy')
        compile project(':rest:rest-client')

        testCompile functionalTestDependencies
        testCompile project(':rest:rest-server').sourceSets.test.output
    }
    test {
        exclude 'functionaltests/**'
    }

    task('functionalTest', type:Test).configure functionalTestConfiguration

    functionalTest.dependsOn rootProject.dist
    clean.dependsOn rootProject.cleanDist
}