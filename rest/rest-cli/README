REST CLI for Scheduler

Introduction:

REST CLI for scheduler is a lightweight client for ProActive Scheduler based on its REST API. It 
does not depends on any internal data objects of the Scheduler or data objects that are exposed via
its native Client API. Therefore it can be compiled and run without any ProActive Programming or 
Scheduler jars. 


Prerequisites: 
- JDK 6 or higher

Dependencies :
- httpcomponents-client-4.3.1
  HTTP/1.1 compliant agent used to send (mutlipart form based) requests. 
- commons-cli-1.1
  Convenient user specified command-line arguments processor.
- jackson-all-1.9.7
  A JSON parser to process and extract required values from JSON responses.
- jruby.jar
  Provides console device with support for history and auto command completion.
- commons-io-2.4
  Convenient library for I/O functions. 

Build:

gradle distZip to generate a standalone ZIP with native scripts to run CLI.

Run:

- Usage
rest-cli.sh -h

- Login
rest-cli.sh -u  <rest-scheduler-server-url> -l <username> -p <password> 

- Submit a job
rest-cli.sh -u  <rest-scheduler-server-url> -l <username> -p <password> -s <job-descriptor-pathname>

- List jobs
rest-cli.sh -u  <rest-scheduler-server-url> -l <username> -p <password> -lj

- Retrieve the result of job '100'
rest-cli.sh -u  <rest-scheduler-server-url> -l <username> -p <password> -jr 100


Notes:

-  javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated

  If you get the above error when you trying to access a remote server (HTTP/SSL), most probably 
  you do not have the issuer certificate of the remote server certificate in your trust store (e.g. 
  <JAVA_HOME>/jre/lib/security/cacerts).
  
  Solutions:
  - You can use '-k' option which bypass certificate verification.
  or 
  - You can add the issuer certificate to your trust store.
  or 
  - You can specify another trust store which contains the issuer certificate.
  (e.g. -ca <trust-store-path>  [-cap <password>])
  
