#!/usr/bin/env bash

CLASSPATH=.
workingDir=$(dirname $0)
. $workingDir/env scheduler-log4j-server

SCHED_JVM_X_OPTS="-Xms128m -Xmx2048m"
SCHED_JVM_D_OPTS=""
DROP_DB=""
SCHED_PARAMS=""

VERBOSE=false

DO_RM=true
DO_REST=true
DO_SCHED=true

print_help () {
	echo -e "$0 [options]"
	echo -e ""
	echo -e "If no option is specified, starts a new Resource Manager, starts a new Scheduler,"
	echo -e "starts the REST API Server and the Web Interface."
	echo -e ""
	echo -e "-u,--rmURL URL              Connect to an existing RM instead of starting a new one"
	echo -e "-p,--policy POLICY          Complete name of the Scheduling policy to use"
	echo -e "-c,--clean                  Start the Scheduler server with a clean Database"
	echo -e "-v,--verbose                Verbose output"
	echo -e "-h,--help                   Print this message and exit"
	echo -e "-Dxxx                       JVM option for the RM, Scheduler and HTTP servers."
	echo -e "                            ie -Dproactive.communication.protocol=pnp"
	echo -e ""
}

stop () {
	echo "Error: $1";
	echo "Use -h to print help";
	exit 1;
}


cleanup () {
	kill -- -$$
}

mktemp_jruby() {
	PREFIX="proactive"
	SUFFIX=".tmp"
	export CLASSPATH=$PA_SCHEDULER/dist/lib/jruby-1.7.4.jar
	export CMD="f=Java::java.io.File.createTempFile(Java::java.lang.String.new(\"$PREFIX\"),Java::java.lang.String.new(\"$SUFFIX\"));Java::java.lang.System.out.println(f)"
	$JAVA -cp $CLASSPATH org.jruby.Main -e $CMD
}
 

trap cleanup 2



while [ $# -gt 0 ]; do
	case $1 in
		-h | --help)
			print_help
			exit 0;;
		-v | --verbose)
			VERBOSE=true
			shift 1;;
		-u | --rmURL)
			[ $# -eq 1 ] && stop "$1 requires an argument"
			SCHED_PARAMS=$SCHED_PARAMS" $1 $2"
			RM_URL=$2
			shift 2;;
		-p | --policy)
			[ $# -eq 1 ] && stop "$1 requires an argument"
			SCHED_PARAMS=$SCHED_PARAMS" $1 $2"
			shift 2;;
		-c | --clean)
			DROP_DB="-Dpa.scheduler.db.hibernate.dropdb=true -Dpa.rm.db.hibernate.dropdb=true"
			shift 1;;
		*)
			if [ $(echo $1 | grep '^-D.*$') ]; then
				SCHED_JVM_D_OPTS="$SCHED_JVM_D_OPTS $1"
			else
				stop "Unknown option: $1"
			fi
			shift;;

	esac
done


SCHED_OUT=$(mktemp_jruby)

"${JAVACMD[@]}" \
	-Dderby.stream.error.file="$PA_SCHEDULER/logs/derby.log" \
	$DROP_DB \
	$SCHED_JVM_X_OPTS \
	org.ow2.proactive.scheduler.util.SchedulerStarter \
	$SCHED_JVM_D_OPTS \
	$SCHED_PARAMS \
	| tee $SCHED_OUT 2>&1 &

SCHED_PID=$!

SCHED_LINE="The scheduler created on "
RM_LINE="The resource manager with 4 local nodes created on "

while true; do
	if [ "$(grep "$SCHED_LINE" $SCHED_OUT)" ]; then
		SCHED_URL=$(grep "$SCHED_LINE" $SCHED_OUT| sed -e "s/^.*${SCHED_LINE}\(.*\)/\1/g"| head -n 1)
		break;
	fi

	if [ "$(grep "$RM_LINE" $SCHED_OUT)" ]; then
		RM_URL=$(grep "$RM_LINE" $SCHED_OUT| sed -e "s/^.*${RM_LINE}\(.*\)/\1/g"| head -n 1)
	fi

	if [ ! "$(ps | grep $SCHED_PID)" ]; then
		# I don't see a way to return the exit code from the forked process
		exit 1;
	fi
	sleep 1s
done


wait
