#!/usr/bin/env bash
# ----------------------------------------------------------------------------
#
# This variable should be set to the directory where is installed PA_SCHEDULER
#

CLASSPATH=.

# ----------------------------------------------------------------------------

if [[ -z "$JAVA_HOME" ]]
then
    JAVA=java
else
    JAVA=$JAVA_HOME/bin/java
fi

# Check Java available
$JAVA -version 2> /dev/null || echo "Java could not be found in your system, configure your PATH to find java executable or define JAVA_HOME environment variable"

#set Scheduler install directory env var

PA_SCHEDULER=$(cd $workingDir/../.././ || (echo "Broken Scheduler/Resource Manager installation" ; exit 1) && echo $PWD)

print_jars() {
    # jruby.jar is put in front because jline internal package is used in the command-line interpreters
    (
        find "$1" -name "jruby-1.7.4.jar"
        find "$1" -name "*.jar" | grep -v jruby-1.7.4.jar
    ) | while read jar; do
        printf "%s:" "$jar"
    done
}

# ----
# Set up the classpath using classes dir or jar files
#
# Check if classes exists and is not empty
if [ -d "$PA_SCHEDULER/classes/scheduler" ]
then
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/classes/common"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/classes/resource-manager"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/classes/scheduler"
    CP=`print_jars "$PA_SCHEDULER/lib/"`
    CLASSPATH=$CLASSPATH:$CP
    CP=`print_jars "$PA_SCHEDULER/addons/"`
    CLASSPATH=${CLASSPATH}${PA_SCHEDULER}/addons/:$CP
else
    # Script engines must be added to classpath to be found
    # it must also placed before jars containing jar-index
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/sigar/sigar.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/jruby-1.7.4.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/jython-2.5.4-rc1.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/groovy-all-2.1.6.jar"
    #  Needed explicitly by VFS (file transfer in pre/post script
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/commons-logging-1.1.1.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/commons-httpclient-3.1.jar"
    # fill with ProActive.jar : use jar index for ProActive dependencies
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive.jar"
    # fill with Scheduler jars : use jar index for Scheduler dependencies
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive_SRM-common.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive_ResourceManager.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive_Scheduler-core.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/ProActive_Scheduler-mapreduce.jar"
    CLASSPATH=$CLASSPATH:"$PA_SCHEDULER/dist/lib/*"
    CP=`print_jars "$PA_SCHEDULER/addons/"`
    CLASSPATH=$CLASSPATH:$PA_SCHEDULER/addons/:$CP
fi

export CLASSPATH

#log4j file
if [ "$1" = "" ]
then
	LOG4J_FILE=file:${PA_SCHEDULER}/config/log4j/log4j-client
else
	LOG4J_FILE=file:${PA_SCHEDULER}/config/log4j/$1
fi

#if log4j file is server, use server security manager
#otherwise, use standard ProActive java.security.policy file
if [ "$1" = "scheduler-log4j-server" -o "$1" = "rm-log4j-server" ]
then
	JAVA_POLICY=$PA_SCHEDULER/config/security.java.policy-server
else
	JAVA_POLICY=$PA_SCHEDULER/config/security.java.policy-client
fi

#Enabling full security debug (extremely verbose, prints all stack traces when any permission is checked)
#POLICY_DEBUG="-Djava.security.debug=all"
#Enabling security policy debug (quite verbose, as it's applicable for all permission checking)
#POLICY_DEBUG="-Djava.security.debug=policy"

#Enabling custom clients policy security debug (normally is enough to debug client's permissions)
#POLICY_DEBUG="-Djava.security.debug=clients"

JAVACMD=($JAVA -Djava.security.manager -Dproactive.configuration="$PA_SCHEDULER/config/proactive/ProActiveConfiguration.xml" -Djava.security.policy="$JAVA_POLICY" $POLICY_DEBUG -Dlog4j.configuration="$LOG4J_FILE" -Dproactive.home="$PA_SCHEDULER" -Dpa.scheduler.home="$PA_SCHEDULER" -Dpa.rm.home="$PA_SCHEDULER")

export PA_SCHEDULER
export JAVACMD

